import "@fluencelabs/aqua-lib/builtin.aqua"
import "@0x3zero/aqua-lib/builtin.aqua"
import "./node.aqua"

func ipfs_get(cid: string) -> IpfsDagGetResult:
  on HOST_PEER_ID:
    result <- IpfsDag.get(cid, "", 0)
  <- result
  
func deserialize_fork(data: string) -> DataTypeFork:
    on HOST_PEER_ID:
        results <- Node.deserialize_fork(data)
    <- results

func get_active_crons() -> FdbCronsResult:
    on HOST_PEER_ID:
        results <- Node.get_active_crons()
    <- results

func  get_all_cron_txs() -> FdbCronTxsResult:
    on HOST_PEER_ID:
        results <- Node.get_all_cron_txs()
    <- results

func get_all_crons() -> FdbCronsResult:
    on HOST_PEER_ID:
        results <- Node.get_all_crons()
    <- results

func get_complete_transactions(from: i64, to: i64) -> FdbTransactionsResult:
    on HOST_PEER_ID:
        results <- Node.get_complete_transactions(from, to)
    <- results

func get_cron_tx_by_tx_hash(tx_hash: string, address: string, chain: string, topic: string) -> FdbCronTxResult:
    on HOST_PEER_ID:
        results <- Node.get_cron_tx_by_tx_hash(tx_hash, address, chain, topic)
    <- results

func get_cron_tx_latest_block(address: string, chain: string, topic: string) -> u64:
    on HOST_PEER_ID:
        results <- Node.get_cron_tx_latest_block(address, chain, topic)
    <- results

func get_cron_latest_block(hash: string) -> u64:
    on HOST_PEER_ID:
        results <- Node.get_cron_latest_block(hash)
    <- results

func get_meta_contract(token_key: string) -> FdbMetaContractResult:
    on HOST_PEER_ID:
        results <- Node.get_meta_contract(token_key)
    <- results

func get_meta_contract_by_id(meta_contract_id: string) -> FdbMetaContractResult:
    on HOST_PEER_ID:
        results <- Node.get_meta_contract_by_id(meta_contract_id)
    <- results

func get_metadata(data_key: string, meta_contract_id: string, public_key: string, alias: string, version: string) -> FdbMetadataResult:
    on HOST_PEER_ID:
        results <- Node.get_metadata(data_key, meta_contract_id, public_key, alias, version) 
    <- results

func get_metadata_with_history(data_key: string, meta_contract_id: string, public_key: string, alias: string, version: string) -> FdbMetadataHistoryResult:
    on HOST_PEER_ID:
        results <- Node.get_metadata_with_history(data_key, meta_contract_id, public_key, alias, version)
    <- results

func get_metadatas(data_key: string, version: string) -> FdbMetadatasResult:
    on HOST_PEER_ID:
        results <- Node.get_metadatas(data_key, version)
    <- results

func get_metadatas_count(data_key: string, version: string) -> u64:
    on HOST_PEER_ID:
        results <- Node.get_metadatas_count(data_key, version)
    <- results

func get_metadatas_by_block(data_key: string, meta_contract_id: string, version: string) -> FdbMetadatasResult:
    on HOST_PEER_ID:
        results <- Node.get_metadatas_by_block(data_key, meta_contract_id, version)
    <- results

func get_metadatas_all_version(data_key: string) -> FdbMetadatasResult:
    on HOST_PEER_ID:
        results <- Node.get_metadatas_all_version(data_key)
    <- results

func get_metadatas_by_tokenkey(token_key: string, token_id: string, version: string) -> FdbMetadatasResult:
    on HOST_PEER_ID:
        results <- Node.get_metadatas_by_tokenkey(token_key, token_id, version)
    <- results

func get_node_clock() -> FdbClock:
    on HOST_PEER_ID:
        results <- Node.get_node_clock()
    <- results

func get_pending_transactions() -> FdbTransactionsResult:
    on HOST_PEER_ID:
        results <- Node.get_pending_transactions()
    <- results

func get_transaction(hash: string) -> FdbTransactionResult:
    on HOST_PEER_ID:
        results <- Node.get_transaction(hash)
    <- results

func get_transactions(query: []TransactionQuery, ordering: []TransactionOrdering, from: u32, to: u32) -> FdbTransactionsResult:
    on HOST_PEER_ID:
        results <- Node.get_transactions(query, ordering, from, to)
    <- results

func get_transaction_receipt(hash: string) -> FdbTransactionReceiptResult:
    on HOST_PEER_ID:
        results <- Node.get_transaction_receipt(hash)
    <- results

func init(): 
    on HOST_PEER_ID:
        Node.init()

func publish(tx_request: TransactionRequest) -> FdbResult:
    on HOST_PEER_ID:
        results <- Node.publish(tx_request)
    <- results

func publish_batch(txs: []TransactionRequest) -> []FdbResult:
    on HOST_PEER_ID:
        results <- Node.publish_batch(txs)
    <- results

func search_cron_tx(address: string, chain: string, topic: string) -> FdbCronTxsResult:
    on HOST_PEER_ID:
        results <- Node.search_cron_tx(address, chain, topic)
    <- results

func search_metadatas(query: []MetadataQuery, ordering: []MetadataOrdering, from: u32, to: u32) -> FdbMetadatasResult:
    on HOST_PEER_ID:
        results <- Node.search_metadatas(query, ordering, from, to)
    <- results

func search_metadatas_count(query: []MetadataQuery, ordering: []MetadataOrdering, from: u32, to: u32) -> u64:
    on HOST_PEER_ID:
        results <- Node.search_metadatas_count(query, ordering, from, to)
    <- results

func send_cron_tx(hash: string, data: string, tx_block_number: u64, tx_hash: string, token_id: string) -> FdbCronTxResult:
    on HOST_PEER_ID:
        results <- Node.send_cron_tx(hash, data, tx_block_number, tx_hash, token_id)
    <- results

func set_cron(transaction_hash: string):
    on HOST_PEER_ID:
        Node.set_cron(transaction_hash)

func set_metadata_cron(meta_contract: MetaContract, cron: Cron, token_id: string, on_metacontract_result: bool, metadatas: []FinalMetadata) -> FdbMetadatasResult:
    on HOST_PEER_ID:
        results <- Node.set_metadata_cron(meta_contract, cron, token_id, on_metacontract_result, metadatas)
    <- results

func generate_token_key(chain_id: string, token_address: string) -> string:
    on HOST_PEER_ID:
        result <- Node.generate_token_key(chain_id, token_address)
    <- result

func generate_data_key(chain_id: string, token_address: string, token_id: string) -> string:
    on HOST_PEER_ID:
        result <- Node.generate_data_key(chain_id, token_address, token_id)
    <- result