/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

// Functions
 
export type Get_transactionResult = { err_msg: string; success: boolean; transaction: { alias: string; chain_id: string; data: string; data_key: string; hash: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; status: number; timestamp: number; token_address: string; token_id: string; token_key: string; version: string; }; }
export function get_transaction(
    hash: string,
    config?: {ttl?: number}
): Promise<Get_transactionResult>;

export function get_transaction(
    peer: FluencePeer,
    hash: string,
    config?: {ttl?: number}
): Promise<Get_transactionResult>;

export function get_transaction(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "hash") [] hash)
                       )
                       (xor
                        (call -relay- ("transaction" "get_transaction") [hash] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_transaction",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transaction" : {
                            "tag" : "struct",
                            "name" : "Transaction",
                            "fields" : {
                                "method" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "timestamp" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "mcdata" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "status" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "chain_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "alias" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "version" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_transactionsResult = { err_msg: string; success: boolean; transactions: { alias: string; chain_id: string; data: string; data_key: string; hash: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; status: number; timestamp: number; token_address: string; token_id: string; token_key: string; version: string; }[]; }
export function get_transactions(
    query: { column: string; op: string; query: string; }[],
    ordering: { column: string; sort: string; }[],
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Get_transactionsResult>;

export function get_transactions(
    peer: FluencePeer,
    query: { column: string; op: string; query: string; }[],
    ordering: { column: string; sort: string; }[],
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Get_transactionsResult>;

export function get_transactions(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "query") [] query)
                          )
                          (call %init_peer_id% ("getDataSrv" "ordering") [] ordering)
                         )
                         (call %init_peer_id% ("getDataSrv" "from") [] from)
                        )
                        (call %init_peer_id% ("getDataSrv" "to") [] to)
                       )
                       (xor
                        (call -relay- ("transaction" "get_transactions") [query ordering from to] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_transactions",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "query" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "TransactionQuery",
                        "fields" : {
                            "column" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "op" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "query" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "ordering" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "TransactionOrdering",
                        "fields" : {
                            "column" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "sort" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "from" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "to" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionsResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transactions" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Transaction",
                                "fields" : {
                                    "method" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "mcdata" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "chain_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function generate_data_key(
    chain_id: string,
    token_address: string,
    token_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_data_key(
    peer: FluencePeer,
    chain_id: string,
    token_address: string,
    token_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_data_key(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "chain_id") [] chain_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "token_address") [] token_address)
                        )
                        (call %init_peer_id% ("getDataSrv" "token_id") [] token_id)
                       )
                       (xor
                        (call -relay- ("transaction" "generate_data_key") [chain_id token_address token_id] result)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "generate_data_key",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "chain_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "token_address" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "token_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_complete_transactionsResult = { err_msg: string; success: boolean; transactions: { alias: string; chain_id: string; data: string; data_key: string; hash: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; status: number; timestamp: number; token_address: string; token_id: string; token_key: string; version: string; }[]; }
export function get_complete_transactions(
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Get_complete_transactionsResult>;

export function get_complete_transactions(
    peer: FluencePeer,
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Get_complete_transactionsResult>;

export function get_complete_transactions(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "from") [] from)
                        )
                        (call %init_peer_id% ("getDataSrv" "to") [] to)
                       )
                       (xor
                        (call -relay- ("transaction" "get_complete_transactions") [from to] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_complete_transactions",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "from" : {
                    "tag" : "scalar",
                    "name" : "i64"
                },
                "to" : {
                    "tag" : "scalar",
                    "name" : "i64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionsResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transactions" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Transaction",
                                "fields" : {
                                    "method" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "mcdata" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "chain_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_pending_transactionsResult = { err_msg: string; success: boolean; transactions: { alias: string; chain_id: string; data: string; data_key: string; hash: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; status: number; timestamp: number; token_address: string; token_id: string; token_key: string; version: string; }[]; }
export function get_pending_transactions(
    config?: {ttl?: number}
): Promise<Get_pending_transactionsResult>;

export function get_pending_transactions(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_pending_transactionsResult>;

export function get_pending_transactions(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (call -relay- ("transaction" "get_pending_transactions") [] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_pending_transactions",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionsResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transactions" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Transaction",
                                "fields" : {
                                    "method" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "mcdata" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "chain_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Send_cron_txResult = { cron_tx: { address: string; chain: string; data: string; data_key: string; error_text: string; hash: string; meta_contract_id: string; status: number; timestamp: number; token_id: string; token_key: string; token_type: string; topic: string; tx_block_number: number; tx_hash: string; }; err_msg: string; success: boolean; }
export function send_cron_tx(
    hash: string,
    data: string,
    tx_block_number: number,
    tx_hash: string,
    token_id: string,
    config?: {ttl?: number}
): Promise<Send_cron_txResult>;

export function send_cron_tx(
    peer: FluencePeer,
    hash: string,
    data: string,
    tx_block_number: number,
    tx_hash: string,
    token_id: string,
    config?: {ttl?: number}
): Promise<Send_cron_txResult>;

export function send_cron_tx(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "hash") [] hash)
                           )
                           (call %init_peer_id% ("getDataSrv" "data") [] data)
                          )
                          (call %init_peer_id% ("getDataSrv" "tx_block_number") [] tx_block_number)
                         )
                         (call %init_peer_id% ("getDataSrv" "tx_hash") [] tx_hash)
                        )
                        (call %init_peer_id% ("getDataSrv" "token_id") [] token_id)
                       )
                       (xor
                        (call -relay- ("transaction" "send_cron_tx") [hash data tx_block_number tx_hash token_id] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "send_cron_tx",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "data" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "tx_block_number" : {
                    "tag" : "scalar",
                    "name" : "u64"
                },
                "tx_hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "token_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronTxResult",
                    "fields" : {
                        "cron_tx" : {
                            "tag" : "struct",
                            "name" : "CronTx",
                            "fields" : {
                                "timestamp" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "data" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "tx_hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "status" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "error_text" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "chain" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "tx_block_number" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "topic" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type Set_metadata_cronArgMeta_contract = { cid: string; meta_contract_id: string; public_key: string; token_key: string; }
export type Set_metadata_cronArgCron = { abi_url: string; address: string; chain: string; hash: string; meta_contract_id: string; node_url: string; public_key: string; status: number; token_key: string; token_type: string; topic: string; } 

export function set_metadata_cron(
    meta_contract: Set_metadata_cronArgMeta_contract,
    cron: Set_metadata_cronArgCron,
    token_id: string,
    on_metacontract_result: boolean,
    metadatas: { alias: string; content: string; loose: number; public_key: string; }[],
    config?: {ttl?: number}
): Promise<void>;

export function set_metadata_cron(
    peer: FluencePeer,
    meta_contract: Set_metadata_cronArgMeta_contract,
    cron: Set_metadata_cronArgCron,
    token_id: string,
    on_metacontract_result: boolean,
    metadatas: { alias: string; content: string; loose: number; public_key: string; }[],
    config?: {ttl?: number}
): Promise<void>;

export function set_metadata_cron(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "meta_contract") [] meta_contract)
                          )
                          (call %init_peer_id% ("getDataSrv" "cron") [] cron)
                         )
                         (call %init_peer_id% ("getDataSrv" "token_id") [] token_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "on_metacontract_result") [] on_metacontract_result)
                       )
                       (call %init_peer_id% ("getDataSrv" "metadatas") [] metadatas)
                      )
                      (xor
                       (call -relay- ("transaction" "set_metadata_cron") [meta_contract cron token_id on_metacontract_result metadatas])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "set_metadata_cron",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "meta_contract" : {
                    "tag" : "struct",
                    "name" : "MetaContract",
                    "fields" : {
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta_contract_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "cron" : {
                    "tag" : "struct",
                    "name" : "Cron",
                    "fields" : {
                        "abi_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "node_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_type" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "hash" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "status" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        },
                        "token_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "topic" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "chain" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta_contract_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "token_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "on_metacontract_result" : {
                    "tag" : "scalar",
                    "name" : "bool"
                },
                "metadatas" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FinalMetadata",
                        "fields" : {
                            "alias" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "content" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "loose" : {
                                "tag" : "scalar",
                                "name" : "i64"
                            },
                            "public_key" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_all_cronsResult = { crons: { abi_url: string; address: string; chain: string; hash: string; meta_contract_id: string; node_url: string; public_key: string; status: number; token_key: string; token_type: string; topic: string; }[]; err_msg: string; success: boolean; }
export function get_all_crons(
    config?: {ttl?: number}
): Promise<Get_all_cronsResult>;

export function get_all_crons(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_all_cronsResult>;

export function get_all_crons(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (call -relay- ("transaction" "get_all_crons") [] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_all_crons",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronsResult",
                    "fields" : {
                        "crons" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Cron",
                                "fields" : {
                                    "abi_url" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "node_url" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "topic" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "chain" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_all_cron_txsResult = { cron_txs: { address: string; chain: string; data: string; data_key: string; error_text: string; hash: string; meta_contract_id: string; status: number; timestamp: number; token_id: string; token_key: string; token_type: string; topic: string; tx_block_number: number; tx_hash: string; }[]; err_msg: string; success: boolean; }
export function get_all_cron_txs(
    config?: {ttl?: number}
): Promise<Get_all_cron_txsResult>;

export function get_all_cron_txs(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_all_cron_txsResult>;

export function get_all_cron_txs(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (call -relay- ("transaction" "get_all_cron_txs") [] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_all_cron_txs",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronTxsResult",
                    "fields" : {
                        "cron_txs" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "CronTx",
                                "fields" : {
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "tx_hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "error_text" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "chain" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "tx_block_number" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "topic" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type PublishArgTx_request = { alias: string; chain_id: string; data: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; signature: string; token_address: string; token_id: string; version: string; } 
export type PublishResult = { transaction_hash: string; }
export function publish(
    tx_request: PublishArgTx_request,
    config?: {ttl?: number}
): Promise<PublishResult>;

export function publish(
    peer: FluencePeer,
    tx_request: PublishArgTx_request,
    config?: {ttl?: number}
): Promise<PublishResult>;

export function publish(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "tx_request") [] tx_request)
                       )
                       (xor
                        (call -relay- ("transaction" "publish") [tx_request] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "publish",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "tx_request" : {
                    "tag" : "struct",
                    "name" : "TransactionRequest",
                    "fields" : {
                        "method" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "signature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "mcdata" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta_contract_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "chain_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "data" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "alias" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbResult",
                    "fields" : {
                        "transaction_hash" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_metadatasResult = { err_msg: string; metadatas: { alias: string; cid: string; data_key: string; hash: string; loose: number; meta_contract_id: string; public_key: string; token_id: string; token_key: string; version: string; }[]; success: boolean; }
export function get_metadatas(
    data_key: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadatasResult>;

export function get_metadatas(
    peer: FluencePeer,
    data_key: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadatasResult>;

export function get_metadatas(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "data_key") [] data_key)
                        )
                        (call %init_peer_id% ("getDataSrv" "version") [] version)
                       )
                       (xor
                        (call -relay- ("transaction" "get_metadatas") [data_key version] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadatas",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "version" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadatasResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Metadata",
                                "fields" : {
                                    "loose" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Ipfs_getResult = { content: string; error: string; success: boolean; }
export function ipfs_get(
    cid: string,
    config?: {ttl?: number}
): Promise<Ipfs_getResult>;

export function ipfs_get(
    peer: FluencePeer,
    cid: string,
    config?: {ttl?: number}
): Promise<Ipfs_getResult>;

export function ipfs_get(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                       )
                       (xor
                        (call -relay- ("ipfs_dag" "get") [cid "" 0] result)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "ipfs_get",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "IpfsDagGetResult",
                    "fields" : {
                        "content" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function set_cron(
    transaction_hash: string,
    config?: {ttl?: number}
): Promise<void>;

export function set_cron(
    peer: FluencePeer,
    transaction_hash: string,
    config?: {ttl?: number}
): Promise<void>;

export function set_cron(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "transaction_hash") [] transaction_hash)
                      )
                      (xor
                       (call -relay- ("transaction" "set_cron") [transaction_hash])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "set_cron",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "transaction_hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_active_cronsResult = { crons: { abi_url: string; address: string; chain: string; hash: string; meta_contract_id: string; node_url: string; public_key: string; status: number; token_key: string; token_type: string; topic: string; }[]; err_msg: string; success: boolean; }
export function get_active_crons(
    config?: {ttl?: number}
): Promise<Get_active_cronsResult>;

export function get_active_crons(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_active_cronsResult>;

export function get_active_crons(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (call -relay- ("transaction" "get_active_crons") [] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_active_crons",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronsResult",
                    "fields" : {
                        "crons" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Cron",
                                "fields" : {
                                    "abi_url" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "node_url" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "topic" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "chain" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_metadataResult = { err_msg: string; metadata: { alias: string; cid: string; data_key: string; hash: string; loose: number; meta_contract_id: string; public_key: string; token_id: string; token_key: string; version: string; }; success: boolean; }
export function get_metadata(
    data_key: string,
    meta_contract_id: string,
    public_key: string,
    alias: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadataResult>;

export function get_metadata(
    peer: FluencePeer,
    data_key: string,
    meta_contract_id: string,
    public_key: string,
    alias: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadataResult>;

export function get_metadata(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "data_key") [] data_key)
                           )
                           (call %init_peer_id% ("getDataSrv" "meta_contract_id") [] meta_contract_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "public_key") [] public_key)
                         )
                         (call %init_peer_id% ("getDataSrv" "alias") [] alias)
                        )
                        (call %init_peer_id% ("getDataSrv" "version") [] version)
                       )
                       (xor
                        (call -relay- ("transaction" "get_metadata") [data_key meta_contract_id public_key alias version] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "meta_contract_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "public_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "alias" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "version" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadataResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadata" : {
                            "tag" : "struct",
                            "name" : "Metadata",
                            "fields" : {
                                "loose" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "cid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "alias" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "version" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Deserialize_forkResult = { address: string; data: string; token_id: string; }
export function deserialize_fork(
    data: string,
    config?: {ttl?: number}
): Promise<Deserialize_forkResult>;

export function deserialize_fork(
    peer: FluencePeer,
    data: string,
    config?: {ttl?: number}
): Promise<Deserialize_forkResult>;

export function deserialize_fork(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "data") [] data)
                       )
                       (xor
                        (call -relay- ("transaction" "deserialize_fork") [data] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "deserialize_fork",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "data" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "DataTypeFork",
                    "fields" : {
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "data" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_metadatas_by_tokenkeyResult = { err_msg: string; metadatas: { alias: string; cid: string; data_key: string; hash: string; loose: number; meta_contract_id: string; public_key: string; token_id: string; token_key: string; version: string; }[]; success: boolean; }
export function get_metadatas_by_tokenkey(
    token_key: string,
    token_id: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadatas_by_tokenkeyResult>;

export function get_metadatas_by_tokenkey(
    peer: FluencePeer,
    token_key: string,
    token_id: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadatas_by_tokenkeyResult>;

export function get_metadatas_by_tokenkey(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "token_key") [] token_key)
                         )
                         (call %init_peer_id% ("getDataSrv" "token_id") [] token_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "version") [] version)
                       )
                       (xor
                        (call -relay- ("transaction" "get_metadatas_by_tokenkey") [token_key token_id version] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadatas_by_tokenkey",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "token_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "token_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "version" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadatasResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Metadata",
                                "fields" : {
                                    "loose" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function publish_batch(
    txs: { alias: string; chain_id: string; data: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; signature: string; token_address: string; token_id: string; version: string; }[],
    config?: {ttl?: number}
): Promise<{ transaction_hash: string; }[]>;

export function publish_batch(
    peer: FluencePeer,
    txs: { alias: string; chain_id: string; data: string; mcdata: string; meta_contract_id: string; method: string; public_key: string; signature: string; token_address: string; token_id: string; version: string; }[],
    config?: {ttl?: number}
): Promise<{ transaction_hash: string; }[]>;

export function publish_batch(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "txs") [] txs)
                       )
                       (xor
                        (call -relay- ("transaction" "publish_batch") [txs] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "publish_batch",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "txs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "TransactionRequest",
                        "fields" : {
                            "method" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "signature" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "mcdata" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "public_key" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "token_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "meta_contract_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "chain_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "token_address" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "data" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "alias" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "version" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FdbResult",
                        "fields" : {
                            "transaction_hash" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Search_metadatasResult = { err_msg: string; metadatas: { alias: string; cid: string; data_key: string; hash: string; loose: number; meta_contract_id: string; public_key: string; token_id: string; token_key: string; version: string; }[]; success: boolean; }
export function search_metadatas(
    query: { column: string; op: string; query: string; }[],
    ordering: { column: string; sort: string; }[],
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Search_metadatasResult>;

export function search_metadatas(
    peer: FluencePeer,
    query: { column: string; op: string; query: string; }[],
    ordering: { column: string; sort: string; }[],
    from: number,
    to: number,
    config?: {ttl?: number}
): Promise<Search_metadatasResult>;

export function search_metadatas(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "query") [] query)
                          )
                          (call %init_peer_id% ("getDataSrv" "ordering") [] ordering)
                         )
                         (call %init_peer_id% ("getDataSrv" "from") [] from)
                        )
                        (call %init_peer_id% ("getDataSrv" "to") [] to)
                       )
                       (xor
                        (call -relay- ("transaction" "search_metadatas") [query ordering from to] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "search_metadatas",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "query" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "MetadataQuery",
                        "fields" : {
                            "column" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "op" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "query" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "ordering" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "MetadataOrdering",
                        "fields" : {
                            "column" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "sort" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "from" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "to" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadatasResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Metadata",
                                "fields" : {
                                    "loose" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function generate_token_key(
    chain_id: string,
    token_address: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_token_key(
    peer: FluencePeer,
    chain_id: string,
    token_address: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_token_key(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "chain_id") [] chain_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "token_address") [] token_address)
                       )
                       (xor
                        (call -relay- ("transaction" "generate_token_key") [chain_id token_address] result)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "generate_token_key",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "chain_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "token_address" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_node_clockResult = { timestamp: number; }
export function get_node_clock(
    config?: {ttl?: number}
): Promise<Get_node_clockResult>;

export function get_node_clock(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_node_clockResult>;

export function get_node_clock(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (call -relay- ("transaction" "get_node_clock") [] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_node_clock",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbClock",
                    "fields" : {
                        "timestamp" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_metadata_with_historyResult = { err_msg: string; history: string[]; metadata: string; success: boolean; }
export function get_metadata_with_history(
    data_key: string,
    meta_contract_id: string,
    public_key: string,
    alias: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadata_with_historyResult>;

export function get_metadata_with_history(
    peer: FluencePeer,
    data_key: string,
    meta_contract_id: string,
    public_key: string,
    alias: string,
    version: string,
    config?: {ttl?: number}
): Promise<Get_metadata_with_historyResult>;

export function get_metadata_with_history(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "data_key") [] data_key)
                           )
                           (call %init_peer_id% ("getDataSrv" "meta_contract_id") [] meta_contract_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "public_key") [] public_key)
                         )
                         (call %init_peer_id% ("getDataSrv" "alias") [] alias)
                        )
                        (call %init_peer_id% ("getDataSrv" "version") [] version)
                       )
                       (xor
                        (call -relay- ("transaction" "get_metadata_with_history") [data_key meta_contract_id public_key alias version] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata_with_history",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "meta_contract_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "public_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "alias" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "version" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadataHistoryResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "history" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "metadata" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_cron_tx_by_tx_hashResult = { cron_tx: { address: string; chain: string; data: string; data_key: string; error_text: string; hash: string; meta_contract_id: string; status: number; timestamp: number; token_id: string; token_key: string; token_type: string; topic: string; tx_block_number: number; tx_hash: string; }; err_msg: string; success: boolean; }
export function get_cron_tx_by_tx_hash(
    tx_hash: string,
    address: string,
    chain: string,
    topic: string,
    config?: {ttl?: number}
): Promise<Get_cron_tx_by_tx_hashResult>;

export function get_cron_tx_by_tx_hash(
    peer: FluencePeer,
    tx_hash: string,
    address: string,
    chain: string,
    topic: string,
    config?: {ttl?: number}
): Promise<Get_cron_tx_by_tx_hashResult>;

export function get_cron_tx_by_tx_hash(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "tx_hash") [] tx_hash)
                          )
                          (call %init_peer_id% ("getDataSrv" "address") [] address)
                         )
                         (call %init_peer_id% ("getDataSrv" "chain") [] chain)
                        )
                        (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                       )
                       (xor
                        (call -relay- ("transaction" "get_cron_tx_by_tx_hash") [tx_hash address chain topic] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_cron_tx_by_tx_hash",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "tx_hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "address" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "chain" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "topic" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronTxResult",
                    "fields" : {
                        "cron_tx" : {
                            "tag" : "struct",
                            "name" : "CronTx",
                            "fields" : {
                                "timestamp" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "data" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "tx_hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "status" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "error_text" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "chain" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "tx_block_number" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "topic" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_cron_tx_latest_block(
    address: string,
    chain: string,
    topic: string,
    config?: {ttl?: number}
): Promise<number>;

export function get_cron_tx_latest_block(
    peer: FluencePeer,
    address: string,
    chain: string,
    topic: string,
    config?: {ttl?: number}
): Promise<number>;

export function get_cron_tx_latest_block(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "address") [] address)
                         )
                         (call %init_peer_id% ("getDataSrv" "chain") [] chain)
                        )
                        (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                       )
                       (xor
                        (call -relay- ("transaction" "get_cron_tx_latest_block") [address chain topic] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_cron_tx_latest_block",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "address" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "chain" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "topic" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Search_cron_txResult = { cron_txs: { address: string; chain: string; data: string; data_key: string; error_text: string; hash: string; meta_contract_id: string; status: number; timestamp: number; token_id: string; token_key: string; token_type: string; topic: string; tx_block_number: number; tx_hash: string; }[]; err_msg: string; success: boolean; }
export function search_cron_tx(
    address: string,
    chain: string,
    topic: string,
    config?: {ttl?: number}
): Promise<Search_cron_txResult>;

export function search_cron_tx(
    peer: FluencePeer,
    address: string,
    chain: string,
    topic: string,
    config?: {ttl?: number}
): Promise<Search_cron_txResult>;

export function search_cron_tx(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "address") [] address)
                         )
                         (call %init_peer_id% ("getDataSrv" "chain") [] chain)
                        )
                        (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                       )
                       (xor
                        (call -relay- ("transaction" "search_cron_tx") [address chain topic] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "search_cron_tx",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "address" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "chain" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "topic" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronTxsResult",
                    "fields" : {
                        "cron_txs" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "CronTx",
                                "fields" : {
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "tx_hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "error_text" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "chain" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "tx_block_number" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "topic" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_meta_contract_by_idResult = { err_msg: string; meta: { cid: string; meta_contract_id: string; public_key: string; token_key: string; }; success: boolean; }
export function get_meta_contract_by_id(
    meta_contract_id: string,
    config?: {ttl?: number}
): Promise<Get_meta_contract_by_idResult>;

export function get_meta_contract_by_id(
    peer: FluencePeer,
    meta_contract_id: string,
    config?: {ttl?: number}
): Promise<Get_meta_contract_by_idResult>;

export function get_meta_contract_by_id(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "meta_contract_id") [] meta_contract_id)
                       )
                       (xor
                        (call -relay- ("transaction" "get_meta_contract_by_id") [meta_contract_id] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_meta_contract_by_id",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "meta_contract_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetaContractResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta" : {
                            "tag" : "struct",
                            "name" : "MetaContract",
                            "fields" : {
                                "cid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_meta_contractResult = { err_msg: string; meta: { cid: string; meta_contract_id: string; public_key: string; token_key: string; }; success: boolean; }
export function get_meta_contract(
    token_key: string,
    config?: {ttl?: number}
): Promise<Get_meta_contractResult>;

export function get_meta_contract(
    peer: FluencePeer,
    token_key: string,
    config?: {ttl?: number}
): Promise<Get_meta_contractResult>;

export function get_meta_contract(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "token_key") [] token_key)
                       )
                       (xor
                        (call -relay- ("transaction" "get_meta_contract") [token_key] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_meta_contract",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "token_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetaContractResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta" : {
                            "tag" : "struct",
                            "name" : "MetaContract",
                            "fields" : {
                                "cid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_transaction_receiptResult = { err_msg: string; receipt: { data: string; error_text: string; hash: string; meta_contract_id: string; status: number; timestamp: number; }; success: boolean; }
export function get_transaction_receipt(
    hash: string,
    config?: {ttl?: number}
): Promise<Get_transaction_receiptResult>;

export function get_transaction_receipt(
    peer: FluencePeer,
    hash: string,
    config?: {ttl?: number}
): Promise<Get_transaction_receiptResult>;

export function get_transaction_receipt(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "hash") [] hash)
                       )
                       (xor
                        (call -relay- ("transaction" "get_transaction_receipt") [hash] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_transaction_receipt",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionReceiptResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "receipt" : {
                            "tag" : "struct",
                            "name" : "TransactionReceipt",
                            "fields" : {
                                "timestamp" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "data" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "status" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "error_text" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function init(
    config?: {ttl?: number}
): Promise<void>;

export function init(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<void>;

export function init(...args: any) {

    let script = `
                    (xor
                     (seq
                      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                      (xor
                       (call -relay- ("transaction" "init") [])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "init",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
